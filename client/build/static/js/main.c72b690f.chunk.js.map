{"version":3,"sources":["Components/Sample.jsx","requestHelper.js","entity.js","App.jsx","store.js","Pages/Main.jsx","reportWebVitals.js","index.jsx"],"names":["Sample","id","name","createdAt","axios","defaults","baseURL","getTest","get","then","res","catch","err","fetchTest","createAsyncThunk","a","payload","data","testAdapter","createEntityAdapter","testSlice","createSlice","initialState","getInitialState","reducers","getAllStates","addOne","extraReducers","fulfilled","state","setAll","select","getSelectors","main","actions","App","dispatch","useDispatch","allTest","useSelector","selectAll","Button","onClick","map","created_at","reducer","testReducer","configureStore","middleware","getDefaultMiddleware","concat","logger","devTools","process","preloadedState","Main","store","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","root","document","getElementById","render","StrictMode"],"mappings":"0JA0BeA,EAvBA,SAAC,GAAD,IAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,KAAMC,EAAb,EAAaA,UAAb,OACb,gCACE,oCAEGF,KAEH,sCAEGC,KAEH,2CAEGC,S,yDCbPC,IAAMC,SAASC,QAA6E,GAE5F,IAIeC,EAJC,kBAAMH,IAAMI,IAAI,SAC7BC,MAAK,SAAAC,GAAG,OAAIA,KACZC,OAAM,SAAAC,GAAG,OAAIA,MCHHC,EAAYC,YACvB,WADuC,sBAEvC,8BAAAC,EAAA,sEACwBR,IADxB,cACQS,EADR,OAGUC,EAASD,EAATC,KAHV,kBAKSA,GALT,4CASIC,EAAcC,YAAoB,IAElCC,EAAYC,YAAY,CAC5BnB,KAAM,OACNoB,aAAcJ,EAAYK,kBAC1BC,SAAU,CACRC,aAAcP,EAAYQ,QAE5BC,cAAc,eACXd,EAAUe,WADA,SACWC,EADX,GACgC,IAAZb,EAAW,EAAXA,QAC7BE,EAAYY,OAAOD,EAAOb,QAKnBe,EAASb,EAAYc,cAChC,SAAAH,GAAK,OAAIA,EAAMI,QAKFb,GAFiBA,EAAUc,QAA3BT,aAEAL,EAAf,SCPee,EArBH,WACV,IAAMC,EAAWC,cACXC,EAAUC,YAAYR,EAAOS,WAEnC,OACE,qCACE,cAACC,EAAA,EAAD,CAAQC,QAAS,kBAAMN,EAASvB,MAAhC,qBAGCyB,EAAQK,KAAI,gBAAG1C,EAAH,EAAGA,GAAIC,EAAP,EAAOA,KAAM0C,EAAb,EAAaA,WAAb,OACX,cAAC,EAAD,CAEE3C,GAAIA,EACJC,KAAMA,EACNC,UAAWyC,GAHN3C,U,iBCZT4C,EAAU,CACdZ,KAAMa,GAGOC,cAAe,CAC5BF,UACAG,WAAY,SAAAC,GAAoB,OAAIA,IAAuBC,OAAOC,MAClEC,UAAUC,EACVC,eAVmB,KCONC,EANF,kBACX,cAAC,IAAD,CAAUC,MAAOA,EAAjB,SACE,cAAC,EAAD,OCKWC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBlD,MAAK,YAAkD,IAA/CmD,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDRO,G,MAAOC,SAASC,eAAe,SAErCC,iBACE,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFJ,GAMFR,M","file":"static/js/main.c72b690f.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Sample = ({ id, name, createdAt }) => (\n  <div>\n    <p>\n      id:\n      {id}\n    </p>\n    <p>\n      name:\n      {name}\n    </p>\n    <p>\n      createdAt:\n      {createdAt}\n    </p>\n  </div>\n);\n\nSample.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  createdAt: PropTypes.string.isRequired\n};\n\nexport default Sample;\n","import axios from 'axios';\n\naxios.defaults.baseURL = process.env.NODE_ENV === 'development' ? 'http://localhost:3000' : '';\n\nconst getTest = () => axios.get('/test')\n  .then(res => res)\n  .catch(err => err);\n\nexport default getTest;\n","import { createAsyncThunk, createEntityAdapter, createSlice } from '@reduxjs/toolkit';\nimport getTest from './requestHelper';\n\nexport const fetchTest = createAsyncThunk(\n  'testCall',\n  async () => {\n    const payload = await getTest();\n\n    const { data } = payload;\n\n    return data;\n  }\n);\n\nconst testAdapter = createEntityAdapter({});\n\nconst testSlice = createSlice({\n  name: 'test',\n  initialState: testAdapter.getInitialState(),\n  reducers: {\n    getAllStates: testAdapter.addOne\n  },\n  extraReducers: {\n    [fetchTest.fulfilled](state, { payload }) {\n      testAdapter.setAll(state, payload);\n    }\n  }\n});\n\nexport const select = testAdapter.getSelectors(\n  state => state.main\n);\n\nexport const { getAllStates } = testSlice.actions;\n\nexport default testSlice.reducer;\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Button } from 'semantic-ui-react';\nimport Sample from './Components/Sample';\nimport { fetchTest, select } from './entity';\n\n/* eslint-disable camelcase */\nconst App = () => {\n  const dispatch = useDispatch();\n  const allTest = useSelector(select.selectAll);\n\n  return (\n    <>\n      <Button onClick={() => dispatch(fetchTest())}>\n        Test me\n      </Button>\n      {allTest.map(({ id, name, created_at }) => (\n        <Sample\n          key={id}\n          id={id}\n          name={name}\n          createdAt={created_at}\n        />\n      ))}\n    </>\n  );\n};\n\nexport default App;\n","import { configureStore } from '@reduxjs/toolkit';\nimport logger from 'redux-logger';\nimport testReducer from './entity';\n\nconst initialState = {};\n\nconst reducer = {\n  main: testReducer\n};\n\nexport default configureStore({\n  reducer,\n  middleware: getDefaultMiddleware => getDefaultMiddleware().concat(logger),\n  devTools: process.env.NODE_ENV !== 'production',\n  preloadedState: initialState\n});\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport App from '../App';\nimport store from '../store';\n\nconst Main = () => (\n  <Provider store={store}>\n    <App />\n  </Provider>\n);\n\nexport default Main;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport { render } from 'react-dom';\nimport Main from './Pages/Main';\nimport reportWebVitals from './reportWebVitals';\nimport 'semantic-ui-css/semantic.min.css';\n\nconst root = document.getElementById('root');\n\nrender(\n  <React.StrictMode>\n    <Main />\n  </React.StrictMode>,\n  root\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}